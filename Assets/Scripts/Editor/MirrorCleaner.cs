using UnityEngine;
using UnityEditor;
using System.IO;

public class MirrorCleaner : MonoBehaviour
{
    [MenuItem("Tools/Clean Mirror Package")]
    public static void CleanMirrorPackage()
    {
        Debug.Log("=== –û–ß–ò–°–¢–ö–ê MIRROR –ü–ê–ö–ï–¢–ê ===");
        
        // 1. –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É Mirror –∏–∑ Assets
        string mirrorPath = "Assets/Mirror";
        if (Directory.Exists(mirrorPath))
        {
            Directory.Delete(mirrorPath, true);
            Debug.Log("‚úÖ –ü–∞–ø–∫–∞ Mirror —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Assets");
        }
        else
        {
            Debug.Log("‚ÑπÔ∏è –ü–∞–ø–∫–∞ Mirror –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Assets");
        }
        
        // 2. –£–¥–∞–ª—è–µ–º Mirror –∏–∑ Packages/manifest.json
        RemoveMirrorFromManifest();
        
        // 3. –û—á–∏—â–∞–µ–º –∫—ç—à –ø–∞–∫–µ—Ç–æ–≤
        ClearPackageCache();
        
        // 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Unity
        RestartUnity();
        
        Debug.Log("=== –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===");
        Debug.Log("Unity –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!");
    }
    
    static void RemoveMirrorFromManifest()
    {
        string manifestPath = "Packages/manifest.json";
        if (File.Exists(manifestPath))
        {
            try
            {
                string content = File.ReadAllText(manifestPath);
                if (content.Contains("com.vis2k.mirror"))
                {
                    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å Mirror
                    string[] lines = content.Split('\n');
                    var newLines = new System.Collections.Generic.List<string>();
                    
                    bool skipNext = false;
                    for (int i = 0; i < lines.Length; i++)
                    {
                        if (lines[i].Contains("com.vis2k.mirror"))
                        {
                            skipNext = true;
                            continue;
                        }
                        
                        if (skipNext && lines[i].Contains("}"))
                        {
                            skipNext = false;
                            continue;
                        }
                        
                        if (!skipNext)
                        {
                            newLines.Add(lines[i]);
                        }
                    }
                    
                    string newContent = string.Join("\n", newLines);
                    File.WriteAllText(manifestPath, newContent);
                    Debug.Log("‚úÖ Mirror —É–¥–∞–ª–µ–Ω –∏–∑ manifest.json");
                }
                else
                {
                    Debug.Log("‚ÑπÔ∏è Mirror –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ manifest.json");
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ manifest.json: {e.Message}");
            }
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è –§–∞–π–ª manifest.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }
    
    static void ClearPackageCache()
    {
        string cachePath = "Library/PackageCache";
        if (Directory.Exists(cachePath))
        {
            try
            {
                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Mirror
                var tempDirs = Directory.GetDirectories(cachePath, ".tmp-*-*");
                foreach (var dir in tempDirs)
                {
                    if (dir.Contains("Mirror") || dir.Contains("vis2k"))
                    {
                        Directory.Delete(dir, true);
                        Debug.Log($"‚úÖ –£–¥–∞–ª–µ–Ω –∫—ç—à: {Path.GetFileName(dir)}");
                    }
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e.Message}");
            }
        }
    }
    
    static void RestartUnity()
    {
        Debug.Log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Unity...");
        
        #if UNITY_EDITOR
            UnityEditor.EditorApplication.OpenProject(System.IO.Directory.GetCurrentDirectory());
        #endif
    }
    
    [MenuItem("Tools/Check Mirror Status")]
    public static void CheckMirrorStatus()
    {
        Debug.Log("=== –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê MIRROR ===");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É Mirror
        string mirrorPath = "Assets/Mirror";
        if (Directory.Exists(mirrorPath))
        {
            Debug.LogWarning("‚ö†Ô∏è –ü–∞–ø–∫–∞ Mirror –Ω–∞–π–¥–µ–Ω–∞ –≤ Assets");
        }
        else
        {
            Debug.Log("‚úÖ –ü–∞–ø–∫–∞ Mirror –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Assets");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º manifest.json
        string manifestPath = "Packages/manifest.json";
        if (File.Exists(manifestPath))
        {
            string content = File.ReadAllText(manifestPath);
            if (content.Contains("com.vis2k.mirror"))
            {
                Debug.LogWarning("‚ö†Ô∏è Mirror –Ω–∞–π–¥–µ–Ω –≤ manifest.json");
            }
            else
            {
                Debug.Log("‚úÖ Mirror –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ manifest.json");
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        string cachePath = "Library/PackageCache";
        if (Directory.Exists(cachePath))
        {
            var tempDirs = Directory.GetDirectories(cachePath, ".tmp-*-*");
            bool foundMirror = false;
            foreach (var dir in tempDirs)
            {
                if (dir.Contains("Mirror") || dir.Contains("vis2k"))
                {
                    Debug.LogWarning($"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –∫—ç—à Mirror: {Path.GetFileName(dir)}");
                    foundMirror = true;
                }
            }
            
            if (!foundMirror)
            {
                Debug.Log("‚úÖ –ö—ç—à Mirror –æ—á–∏—â–µ–Ω");
            }
        }
        
        Debug.Log("=== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===");
    }
} 